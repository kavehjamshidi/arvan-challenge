// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RateLimiter is an autogenerated mock type for the RateLimiter type
type RateLimiter struct {
	mock.Mock
}

// GetUserLimit provides a mock function with given fields: ctx, userID
func (_m *RateLimiter) GetUserLimit(ctx context.Context, userID string) (int, error) {
	ret := _m.Called(ctx, userID)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAllowed provides a mock function with given fields: ctx, userID, limit
func (_m *RateLimiter) IsAllowed(ctx context.Context, userID string, limit int) (bool, error) {
	ret := _m.Called(ctx, userID, limit)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (bool, error)); ok {
		return rf(ctx, userID, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) bool); ok {
		r0 = rf(ctx, userID, limit)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, userID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserLimit provides a mock function with given fields: ctx, userID, limit
func (_m *RateLimiter) SetUserLimit(ctx context.Context, userID string, limit int) error {
	ret := _m.Called(ctx, userID, limit)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, userID, limit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRateLimiter creates a new instance of RateLimiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateLimiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateLimiter {
	mock := &RateLimiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
