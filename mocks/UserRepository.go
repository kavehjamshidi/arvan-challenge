// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// DecrementUsage provides a mock function with given fields: ctx, userID, usage
func (_m *UserRepository) DecrementUsage(ctx context.Context, userID string, usage int64) error {
	ret := _m.Called(ctx, userID, usage)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, userID, usage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserRateLimit provides a mock function with given fields: ctx, userID
func (_m *UserRepository) GetUserRateLimit(ctx context.Context, userID string) (int, error) {
	ret := _m.Called(ctx, userID)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementUsage provides a mock function with given fields: ctx, userID, usage
func (_m *UserRepository) IncrementUsage(ctx context.Context, userID string, usage int64) error {
	ret := _m.Called(ctx, userID, usage)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, userID, usage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetUsage provides a mock function with given fields: ctx, end
func (_m *UserRepository) ResetUsage(ctx context.Context, end time.Time) error {
	ret := _m.Called(ctx, end)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) error); ok {
		r0 = rf(ctx, end)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
